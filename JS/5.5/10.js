// Напишите функцию shuffle(array), 
// которая перемешивает (переупорядочивает случайным образом) элементы массива.

// Многократные прогоны через shuffle могут привести к разным последовательностям элементов. 

// Например:

let arr = [1, 2, 3];

shuffle(arr);
console.log(arr);
// arr = [3, 2, 1]

// shuffle(arr);
// console.log(arr);
// arr = [2, 1, 3]

// shuffle(arr);
// console.log(arr);
// arr = [3, 1, 2]
// ...

// Все последовательности элементов должны иметь одинаковую вероятность. 
// Например, [1,2,3] может быть переупорядочено как [1,2,3] или [1,3,2], 
// или [3,1,2] и т.д., с равной вероятностью каждого случая.

// Мой вариант:

function shuffle(array) {
    for (let i = 0; i < array.length; i++) {
        let j = Math.floor(Math.random() * (i + 1)); // немножко подглядел у chatGPT) Это алгоритм Фишера-Йетса, только я его сделал наоборот
        [array[j], array[i]] = [array[i], array[j]]; // Интересное применение квадпратных скобок, надо запомнить
    };
}

// Проверка
// подсчёт вероятности для всех возможных вариантов
let count = {
    '123': 0,
    '132': 0,
    '213': 0,
    '231': 0,
    '321': 0,
    '312': 0
};

for (let i = 0; i < 1000000; i++) {
    let array = [1, 2, 3];
    shuffle(array);
    count[array.join('')]++;
}

// показать количество всех возможных вариантов
for (let key in count) {
    console.log(`${key}: ${count[key]}`);
}

// Обычный перебор массива
// Только вводится еще переменная j, которая зависит от i, чтобы не было опвторяющихся значений
// (среди индексов переменных в массве)
// Далее мы просто берем и меняем их местами, чтобы сделать случайный порядок

// Их вариант:

function shuffle(array) {
    array.sort(() => Math.random() - 0.5);
}
// е мае, опять решение от меня ускользнуло, это же так просто!
// Для сортировки мы должны возвращать значения из диапазона от -1 до 1
// в зависимости от ситуации.
// А тут мы взяли рандоемное число от 0 до 1, далее сдивнули значения на 0.5
// и тем самым охватываем тот самый диапазон из чисел.